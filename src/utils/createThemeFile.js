const fs = require('fs');
const path = require('path');

/**
 * Generates a standard WordPress PHP file header comment.
 * @param {string} fileName The name of the file (e.g., 'header.php').
 * @param {string} themeName The name of the theme.
 * @param {boolean} [isMain] Whether this is the main template file. Defaults to `false`.
 * @returns {string} The formatted PHP docblock.
 */
const generateFileHeader = (fileName, themeName, isMain = false) => {
  const name = path.basename(fileName, '.php');
  const description = isMain
    ? `The main template file for the ${themeName} theme.`
    : `The template for displaying the ${name}.`;

  return `<?php
/**
 * ${description}
 * @package ${themeName}
 */
?>\n`;
};

/**
 * Generates the content for the style.css file.
 * @param {object} options The theme options.
 * @param {string} [options.themeName] The name of the theme. Defaults to 'MyTheme'.
 * @param {string} [options.themeURI] The theme URI. Defaults to 'https://example.com/'.
 * @param {string} [options.author] The author of the theme. Defaults to 'Theme Author'.
 * @param {string} [options.authorURI] The author URI. Defaults to 'https://example.com/'.
 * @param {string} [options.description] The theme description. Defaults to 'A custom theme generated by php-theme-gen.'.
 * @param {string} [options.version] The theme version. Defaults to '1.0.0'.
 * @param {string} [options.license] The theme license. Defaults to 'GNU General Public License v2 or later'.
 * @param {string} [options.licenseURI] The theme license URI. Defaults to 'http://www.gnu.org/licenses/gpl-2.0.html'.
 * @param {string} [options.tags] Comma-separated tags for the theme. Defaults to 'custom-theme'.
 * @param {string} [options.textDomain] The text domain for the theme. Defaults to a slugified theme name.
 * @returns {string} The content for style.css.
 */
const generateStyleCss = (options) => {
  const {
    themeName = 'MyTheme',
    themeURI = 'https://example.com/',
    author = 'Theme Author',
    authorURI = 'https://example.com/',
    description = 'A custom theme generated by php-theme-gen.',
    version = '1.0.0',
    license = 'GNU General Public License v2 or later',
    licenseURI = 'http://www.gnu.org/licenses/gpl-2.0.html',
    tags = 'custom-theme',
    textDomain = themeName.toLowerCase().replace(/\s+/g, '-'),
  } = options;

  return `/*
Theme Name: ${themeName}
Theme URI: ${themeURI}
Author: ${author}
Author URI: ${authorURI}
Description: ${description}
Version: ${version}
License: ${license}
License URI: ${licenseURI}
Tags: ${tags}
Text Domain: ${textDomain}
*/

/* Add your custom styles here */
`;
};

/**
 * Generates the content for the functions.php file.
 * @param {object} options The theme options.
 * @param {string} [options.themeName] The name of the theme. Defaults to 'MyTheme'.
 * @param {string} [options.textDomain] The text domain for the theme. Defaults to a slugified theme name.
 * @returns {string} The content for functions.php.
 */
const generateFunctionsPhp = (options) => {
  const {
    themeName = 'MyTheme',
    textDomain = themeName.toLowerCase().replace(/\s+/g, '-'),
  } = options;

  return `<?php
/**
 * Theme functions and definitions
 *
 * @package ${themeName}
 */

if ( ! function_exists( '${textDomain}_setup' ) ) :
	/**
	 * Sets up theme defaults and registers support for various WordPress features.
	 *
	 * Note that this function is hooked into the after_setup_theme hook, which
	 * runs before the init hook. The init hook is too late for some features, such as indicating
	 * support for post thumbnails.
	 */
	function ${textDomain}_setup() {
		/*
		 * Make theme available for translation.
		 * Translations can be filed in the /languages/ directory.
		 * If you're building a theme based on ${themeName}, use a find and replace
		 * to change '${textDomain}' to the name of your theme in all the template files.
		 */
		load_theme_textdomain( '${textDomain}', get_template_directory() . '/languages' );

		// Add default posts and comments RSS feed links to head.
		add_theme_support( 'automatic-feed-links' );

		/*
		 * Let WordPress manage the document title.
		 * By adding theme support, we declare that this theme does not use a
		 * hard-coded <title> tag in the document head, and expect WordPress to
		 * provide it for us.
		 */		add_theme_support( 'title-tag' );

		/*
		 * Enable support for Post Thumbnails on posts and pages.
		 *
		 * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/
		 */
		add_theme_support( 'post-thumbnails' );

		// This theme uses wp_nav_menu() in one location.
		register_nav_menus( array(
			'menu-1' => esc_html__( 'Primary', '${textDomain}' ),
		) );

		/*
		 * Switch default core markup for search form, comment form, and comments
		 * to output valid HTML5.
		 */
		add_theme_support( 'html5', array(
			'search-form',
			'comment-form',
			'comment-list',
			'gallery',
			'caption',
			'style',
			'script',
		) );

		// Set up the WordPress core custom background feature.
		add_theme_support( 'custom-background', apply_filters( '${textDomain}_custom_background_background_args', array(
			'default-color' => 'ffffff',
			'default-image' => '',
		) ) );

		// Add theme support for selective refresh for widgets in Customizer.
		add_theme_support( 'customize-selective-refresh-widgets' );

		/**
		 * Add support for core custom logo.
		 *
		 * @link https://developer.wordpress.org/themes/functionality/custom-logo/
		 */
		add_theme_support( 'custom-logo', array(
			'height'      => 250,
			'width'       => 250,
			'flex-width'  => true,
			'flex-height' => true,
		) );
	}
endif;
add_action( 'after_setup_theme', '${textDomain}_setup' );

/**
 * Enqueue scripts and styles.
 */
function ${textDomain}_scripts() {
	wp_enqueue_style( '${textDomain}-style', get_stylesheet_uri() );

	// Example of enqueuing a custom script (if you have one)
	// wp_enqueue_script( '${textDomain}-navigation', get_template_directory_uri() . '/js/navigation.js', array(), '20151215', true );

	// Example of enqueuing a custom style (if you have one)
	// wp_enqueue_style( '${textDomain}-custom-style', get_template_directory_uri() . '/css/custom.css' );
}
add_action( 'wp_enqueue_scripts', '${textDomain}_scripts' );

`;
};

/**
 * Creates theme files from a source file.
 * @param {string} sourceFile The path to the source file.
 * @param {object} options Additional options.
 * @param {string} [options.output] The output directory. Defaults to '.'.
 * @param {string} [options.themeName] The name of the theme. Defaults to 'MyTheme'.
 * @throws {Error} If the source file is not found.
 */
function createThemeFile(sourceFile, options) {
  try {
    const sourceContent = fs.readFileSync(sourceFile, 'utf8');
    const regex = /<!-- wp:file name="([^"]+)" -->(.*?)<!-- \/wp:file -->/gs;

    const outputDir = options.output || '.';
    // Create output directory if it doesn't exist
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Create the part files (header.php, etc.)
    const matches = [...sourceContent.matchAll(regex)];
    if (matches.length === 0) {
      console.log('No wp:file tags found in the source file.');
    } else {
      for (const match of matches) {
        const fileName = match[1];
        const content = match[2].trim();
        const outputFilePath = path.join(outputDir, `${fileName}.php`);
        const fileHeader = generateFileHeader(
          `${fileName}.php`,
          options.themeName,
        );

        fs.writeFileSync(outputFilePath, fileHeader + content);
        console.log(`Successfully created ${outputFilePath}`);
      }
    }

    // Create the main theme file by replacing the wp:file blocks
    const mainThemeFileContent = sourceContent.replace(
      regex,
      (_match, fileName) => {
        if (fileName === 'header') {
          return '<?php get_header(); ?>';
        }
        if (fileName === 'footer') {
          return '<?php get_footer(); ?>';
        }
        if (fileName === 'sidebar') {
          return '<?php get_sidebar(); ?>';
        }
        return `<?php get_template_part('${fileName.replace(/'/g, "\\'")}'); ?>`;
      },
    );

    const sourceFileName = path.basename(sourceFile, path.extname(sourceFile));
    const mainThemeFileName = `${sourceFileName}.php`;
    const mainThemeFilePath = path.join(outputDir, mainThemeFileName);
    const mainHeader = generateFileHeader(
      mainThemeFileName,
      options.themeName,
      true,
    );

    fs.writeFileSync(mainThemeFilePath, mainHeader + mainThemeFileContent);
    console.log(`Successfully created main theme file: ${mainThemeFilePath}`);

    // Create style.css
    const styleCssContent = generateStyleCss(options);
    const styleCssPath = path.join(outputDir, 'style.css');
    fs.writeFileSync(styleCssPath, styleCssContent);
    console.log(`Successfully created ${styleCssPath}`);

    // Create functions.php
    const functionsPhpContent = generateFunctionsPhp(options);
    const functionsPhpPath = path.join(outputDir, 'functions.php');
    fs.writeFileSync(functionsPhpPath, functionsPhpContent);
    console.log(`Successfully created ${functionsPhpPath}`);
  } catch (error) {
    if (error.code === 'ENOENT') {
      throw new Error(`Source file not found: ${sourceFile}`);
    }
    throw error;
  }
}

module.exports = {
  createThemeFile,
};
